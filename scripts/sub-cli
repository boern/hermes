#!/usr/bin/env python3

import argparse
import logging as l
from pathlib import Path
import numbers
import json
from substrateinterface import SubstrateInterface, Keypair
from substrateinterface.exceptions import SubstrateRequestException

# import logging
# logging.basicConfig(level=logging.DEBUG)

# substrate = SubstrateInterface(
#     url="ws://127.0.0.1:9944"
# )
# print(substrate.properties)
# keypair = Keypair.create_from_uri('//Alice')

def query_denom_trace(substrate):
    result = substrate.query_map(
        module='Ics20Transfer',
        storage_function='DenomTrace', 
    )

    return result


def query_assets(substrate):
    result = substrate.query_map(
        module="Assets",
        storage_function="Asset")
    return result


def tx(args):
    # print("tx args",args)
    params = json.loads(args.params)
    # print(params)
    substrate = SubstrateInterface(args.url)
    call = substrate.compose_call(
        call_module=args.module,
        call_function=args.method,
        call_params=params
    )
    # print(call)
    keypair = Keypair.create_from_uri(args.signer)
    # # Wrap it in sudo.
    if args.sudo is not None:
        keypair = Keypair.create_from_uri(args.sudo)
        call = substrate.compose_call(
            call_module='Sudo',
            call_function='sudo',
            call_params={'call': call.value})

    extrinsic = substrate.create_signed_extrinsic(
        call=call,
        keypair=keypair,
        era={'period': 64}
    )

    try:
        receipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)

        print('Extrinsic "{}" included in block "{}"'.format(
            receipt.extrinsic_hash, receipt.block_hash
        ))

        if receipt.is_success:

            print('✅ Success, triggered events:')
            for event in receipt.triggered_events:
                # print(f'* {event.value}')
                event_json = json.dumps(event.value, indent=4)
                print(event_json)

        else:
            print('⚠️ Extrinsic Failed: ', receipt.error_message)

    except SubstrateRequestException as e:
        print("Failed to send: {}".format(e))


def query(args):
    # print("query args",args)
    # params = list(args.params)
    substrate = SubstrateInterface(args.url)
    if args.params != None:
        params = []
        for param in args.params:
            try:
                params.append(int(param))
            except ValueError:
                params.append(param)
        # print(params)
    
        result = substrate.query(
            module=args.module,
            storage_function=args.storage,
            params=params
        )
        result_json = json.dumps(result.value, indent=4)
        print('query result: \n', result_json)

    else:
        result = substrate.query_map(
            module=args.module,
            storage_function=args.storage)
        for record in result:
        #   print('query record: ', record[0],record[1])
          print('query record: ', record)


def format_balance(amount: int,substrate):
    amount = format(amount / 10**substrate.properties.get('tokenDecimals', 0), ".18g")
    return f"{amount} {substrate.properties.get('tokenSymbol', 'UNIT')}"


def query_balances(args):
    # print("query balances args",args)
    account = args.account
    # print(account)
    substrate = SubstrateInterface(args.url)
    result = substrate.query(
        module='System',
        storage_function='Account',
        params=[args.account]
    )
    # print('System Account: ', result)
    amount = (result.value["data"]["free"] + result.value["data"]["reserved"])
    # amount = format(amount / 10**substrate.properties.get('tokenDecimals', 0), ".18g")
    print(f'''account: {account}\nbalances:\n- amount: {amount}\n  denom: {substrate.properties.get('tokenSymbol', 'UNIT')}''')

    assets = query_assets(substrate)
    # print('Assets Info: ', assets)
    for asset in assets:
        asset_id = asset[0]
        result = substrate.query_map(
            module='Ics20Transfer',
            storage_function='AssetIdByName',
        )
        for r in result:
            if asset_id==r[1]:
                asset_name = r[0]
                # print(asset_id,asset_name)
        
        denom_traces = query_denom_trace(substrate)
        for dt in denom_traces:
            # print(dt)
            if asset_name==dt[1]['base_denom']:
                # print(asset_id)
                # print(asset_name)
                trace_path = dt[1]['trace_path']
                denom_trace_hash = dt[0]
                # print(denom_trace_hash)
        
        params = [asset_id.value,account]
        # print(params)
        result = substrate.query(
            module='Assets',
            storage_function='Account',
            params=params
        )
        # print('Assets Account: ', result)
        if result!= None:
            print(f'''- amount: {result['balance']}\n  denom: {asset_name}\n  trace_path: {trace_path}\n  denom_trace_hash: {denom_trace_hash}''')


def main():
    parser = argparse.ArgumentParser(
        prog='sub-cli',
        description='The sub-cli is a utility used to interact with substrate.')

    parser.add_argument('--url',
                        help=' The substrate endpoint to connect to, e.g. wss://rpc.polkadot.io (default: %(default)s)',
                        type=str,
                        metavar='url',
                        default='ws://127.0.0.1:9944')
    
    parser.add_argument('--sudo',
                        help='Execute tx as a sudo account, e.g. "//Alice" or "bottom drive obey lake curtain smoke basket hold race lonely fit walk"',
                        metavar='sudo account',
                        type=str)
    # parser.add_argument('--log-level',
    #                     help='minimum log level (default: debug)',
    #                     metavar='LOG',
    #                     choices=['notset', 'debug', 'info',
    #                              'warning', 'error', 'critical'],
    #                     default='debug')
    parser.add_argument('--version', action='version', version='%(prog)s 0.1')
    
    subparsers = parser.add_subparsers(title='sub command',
                                       metavar='  tx|query|query-balances',)

    # add sub command for tx
    parser_tx = subparsers.add_parser('tx',
                                    help='Create and execute a extrinsic transaction.',
                                    description='''  sub-cli tx --signer //Alice --module Balances --method transfer --params '{"dest": "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty","value": 20000000000000000}' ''',
                                    formatter_class=argparse.RawDescriptionHelpFormatter)
    parser_tx.add_argument('--signer',
                        help='''The tx signer, e.g. '//Alice' or 'bottom drive obey lake curtain smoke basket hold race lonely fit walk' (default: '//Alice')''',
                        required=True,
                        nargs='?',
                        type=str,
                        default='//Alice')
 
    parser_tx.add_argument('--module',
                        help='The module name, e.g. --module Balances',
                        nargs='?',
                        type=str)
    
    parser_tx.add_argument('--method',
                        help='The method name, e.g. --method transfer or --method force_transfer',
                        nargs='?',
                        type=str)
    parser_tx.add_argument('--params',
                        help='''The method params,a json string, e.g. '{"dest": "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty","value": 20000000000000000}' ''',
                        nargs='?',
                        type=str)
    parser_tx.set_defaults(func=tx)

    # add sub command for query
    parser_query = subparsers.add_parser('query',
                                        help='Query the chain state value for module/pallet storage object.',
                                       description='''  sub-cli query --module System --storage Account --params 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty ''',
                                       formatter_class=argparse.RawDescriptionHelpFormatter)

    parser_query.add_argument('--module',
                        help='The module name, e.g. --module System',
                        nargs='?',
                        type=str)
    parser_query.add_argument('--storage',
                        help='The storage name, e.g. --storage Account or --storage BlockHash',
                        nargs='?',
                        type=str)
    parser_query.add_argument('--params',
                        help='''The storage params, e.g. --params 666 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty ''',
                        nargs="*")
    parser_query.set_defaults(func=query)

    # add sub command for query balances
    parser_query_balances = subparsers.add_parser('query-balances',
                                       help='Query all the asset balances for specificed account.',
                                       description='''  sub-cli query-balances --account 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty''',
                                       formatter_class=argparse.RawDescriptionHelpFormatter)
    parser_query_balances.add_argument('--account',
                        help='''The account, e.g. --account 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty''',
                        nargs="?",
                        type=str)
    parser_query_balances.add_argument('--asset',
                        help='''The asset id, e.g. --asset 666''',
                        nargs="?",
                        type=int)
    parser_query_balances.set_defaults(func=query_balances)
    
    args = parser.parse_args()
    # print(args)
    args.func(args)
 


if __name__ == "__main__":
    main()
